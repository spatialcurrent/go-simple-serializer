// =================================================================
//
// Copyright (C) 2019 Spatial Current, Inc. - All Rights Reserved
// Released as open source under the MIT License.  See LICENSE file.
//
// =================================================================

package yaml

import (
	"bufio"
	"bytes"
	"io"

	"github.com/spatialcurrent/go-simple-serializer/pkg/splitter"
)

// DocumentScanner is a scanner that scans through a YAML file
// and splits on the document boundary marker ("---").
type DocumentScanner struct {
	scanner  *bufio.Scanner
	document []byte
}

// Buffer sets the initial buffer to use when scanning and the maximum
// size of buffer that may be allocated during scanning. The maximum
// token size is the larger of max and cap(buf). If max <= cap(buf),
// Scan will use this buffer only and do no allocation.
//
// By default, Scan uses an internal buffer and sets the
// maximum token size to MaxScanTokenSize.
//
// Buffer panics if it is called after scanning has started.
func (d *DocumentScanner) Buffer(buf []byte, max int) {
	d.scanner.Buffer(buf, max)
}

// Bytes returns the most recent document generated by a call to Scan.
// The underlying array may point to data that will be overwritten
// by a subsequent call to Scan. It does no allocation.
func (d *DocumentScanner) Bytes() []byte {
	return d.document
}

// Text returns the most recent document generated by a call to Scan
// as a newly allocated string holding its bytes.
func (d *DocumentScanner) Text() string {
	return string(d.document)
}

// Scan advances the Scanner to the next document, which will then be
// available through the Bytes or Text method. It returns false when the
// scan stops, either by reaching the end of the input or an error.
// After Scan returns false, the Err method will return any error that
// occurred during scanning, except that if it was io.EOF, Err
// will return nil.
// Scan panics if the split function returns too many empty
// tokens without advancing the input. This is a common error mode for
// scanners.
func (d *DocumentScanner) Scan() bool {
	d.document = make([]byte, 0)
	for d.scanner.Scan() {
		b := d.scanner.Bytes()
		if bytes.Equal(b, BoundaryMarker) {
			return true
		}
		d.document = append(d.document, b...)
	}
	return len(d.document) > 0
}

// Err returns the first non-EOF error that was encountered by the Scanner.
func (d *DocumentScanner) Err() error {
	return d.scanner.Err()
}

// NewDocumentScanner returns a new document scanner for YAML contents from io.Reader "r".
// Set "dropCR" to true to drop carriage returns at the end of lines.
func NewDocumentScanner(r io.Reader, dropCR bool) *DocumentScanner {
	s := bufio.NewScanner(r)
	s.Split(splitter.ScanLines('\n', dropCR))
	return &DocumentScanner{
		scanner:  s,
		document: make([]byte, 0),
	}
}
